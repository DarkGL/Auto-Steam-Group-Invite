/* Script generated by Pawn Studio */

#include <amxmodx>
#include <amxmisc>
#include <regex>
#include <sqlx>

#define PLUGIN	"invite Plugin"
#define AUTHOR	"DarkGL"
#define VERSION	"1.0"

#define AUTH_STEAM 2

//#define HARDCODED

#if defined HARDCODED
new const szHost[]		=	"HOST";
new const szUser[]		=	"USER";
new const szPass[]		=	"PASS";
new const szDb[]		=	"DB";

new const accLogin[ ]	=	"login";
new const accPass[ ]	=	"pass";
#else

new pCvarHost ,
pCvarUser ,
pCvarPass ,
pCvarDb , 
pCvarAccLogin , 
pCvarAccPass;

new accLogin[ 64 ];
new accPass[ 64 ];

#endif

new pCvarGroup;

new Handle: sqlTuple;

new pcv_dp_r_id_provider;

new szGroup[ 64 ];
	
new bool: sqlOk	=	false;

public plugin_init(){
	
	register_plugin(PLUGIN, VERSION, AUTHOR)
	
	#if !defined HARDCODED
	
	pCvarHost	=	register_cvar( "invite_sql_host" , "host" , FCVAR_PROTECTED );
	pCvarUser	=	register_cvar( "invite_sql_user" , "user" , FCVAR_PROTECTED );
	pCvarPass	=	register_cvar( "invite_sql_pass" , "pass" , FCVAR_PROTECTED );
	pCvarDb		=	register_cvar( "invite_sql_db" , "db" , FCVAR_PROTECTED );
	
	pCvarAccLogin	=	register_cvar( "invite_acc_login" , "login" , FCVAR_PROTECTED );
	pCvarAccPass	=	register_cvar( "invite_acc_pass" , "pass" , FCVAR_PROTECTED );
	
	#endif
	
}

public plugin_cfg(){
	
	#if !defined HARDCODED
	
	new szHost[ 64 ] , szUser[ 64 ] , szPass[ 64 ] , szDb[ 64 ];
	
	get_pcvar_string( pCvarHost , szHost , charsmax( szHost ) );
	get_pcvar_string( pCvarUser , szUser , charsmax( szUser ) );
	get_pcvar_string( pCvarPass , szPass , charsmax( szPass ) );
	get_pcvar_string( pCvarDb , szDb , charsmax( szDb ) );
	
	get_pcvar_string( pCvarAccLogin , accLogin , charsmax( accLogin ) );
	get_pcvar_string( pCvarAccPass , accPass , charsmax( accPass) );
	
	#endif
	
	sqlTuple	=	SQL_MakeDbTuple( szHost , szUser , szPass , szDb );
	
	pcv_dp_r_id_provider = get_cvar_pointer("dp_r_id_provider");
	
	if( !pcv_dp_r_id_provider ){
		state onlysteam;
	}
	
	pCvarGroup		=	register_cvar( "invite_group_link" , "grouplink" , FCVAR_PROTECTED );
	
	get_pcvar_string( pCvarGroup , szGroup , charsmax( szGroup ) );
	
	new iRet , 
		error[128]
	
	new Regex:regexHandle	=	regex_match( szGroup , "((http|https)?(://)?)steamcommunity.com/groups/.*" , iRet , error , charsmax( error ) , "i" );
	
	if( regexHandle <= REGEX_NO_MATCH ){
		
		log_amx( "RegEx Invite : %s" , error );
		
		set_fail_state( "Sprawdzanie linku grupy sie nie powiodlo" );
		
	}
	
	SQL_ThreadQuery( sqlTuple , "startSQLHandle" , "SELECT * FROM `steaminv_toInvite`" );
}

public startSQLHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(Errcode)
	{
		log_to_file("addons/amxmodx/logs/sql.log","Error on sqlStartHandle query: %s",Error)
	}
	if(FailState == TQUERY_CONNECT_FAILED)
	{
		log_to_file("addons/amxmodx/logs/sql.log","Could not connect to SQL database.")
		return PLUGIN_CONTINUE
	}
	else if(FailState == TQUERY_QUERY_FAILED)
	{
		log_to_file("addons/amxmodx/logs/sql.log","sqlStartHandle Query failed.")
		return PLUGIN_CONTINUE
	}
	
	sqlOk = true;
	
	return PLUGIN_CONTINUE
}

public plugin_end(){
	SQL_FreeHandle( sqlTuple );
}

public client_authorized( id ){
	
	new szSteamID[ 64 ] ,
		szQuery[ 256 ];
		
	if( !is_user_steam( id ) || !sqlOk ){
		return ;
	}
	
	get_user_authid( id , szSteamID , charsmax( szSteamID ) );
	
	formatex( szQuery , charsmax( szQuery ) , "INSERT IGNORE INTO `steaminv_toInvite` ( steamid , group , login , pass ) VALUES ( '%s' ,'%s','%s','%s' )" , szSteamID , szGroup , accLogin , accPass );
	
	SQL_ThreadQuery( sqlTuple , "insertClientHandle" , szQuery );
}

public insertClientHandle(FailState,Handle:Query,Error[],Errcode,Data[],DataSize)
{
	if(Errcode)
	{
		log_to_file("addons/amxmodx/logs/sql.log","Error on insertClientHandle query: %s",Error)
	}
	if(FailState == TQUERY_CONNECT_FAILED)
	{
		log_to_file("addons/amxmodx/logs/sql.log","Could not connect to SQL database.")
		return PLUGIN_CONTINUE
	}
	else if(FailState == TQUERY_QUERY_FAILED)
	{
		log_to_file("addons/amxmodx/logs/sql.log","insertClientHandle Query failed.")
		return PLUGIN_CONTINUE
	}
	
	return PLUGIN_CONTINUE;
}

stock bool: is_user_steam(id) <>
{
	server_cmd("dp_clientinfo %d", id);
	server_exec();
	
	static uClient;
	uClient = get_pcvar_num(pcv_dp_r_id_provider);
	
	if ( uClient == AUTH_STEAM )
		return true;
	
	return false;
}

stock bool: is_user_steam(id) <onlysteam>
{
	#pragma unused id
	
	return true;
}
